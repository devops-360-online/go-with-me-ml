# Database Schema Initialization Job
# 
# This job creates the necessary database tables for the ML Inference service:
# - requests: Stores all ML requests and their status
# - token_logs: Tracks token usage for billing and quotas
# - quota_usage: Manages user quota information
apiVersion: batch/v1
kind: Job
metadata:
  name: ml-db-init
  labels:
    app: ml-db-init
spec:
  # Automatically delete this job after 24 hours (86400 seconds)
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      # Don't restart if successful; retry only on failure
      restartPolicy: OnFailure
      containers:
      - name: init-db
        # Using PostgreSQL Alpine image for a lightweight container
        image: postgres:14-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Create SQL script with all database schema definitions
          cat > /tmp/init.sql << EOF
          ------------------------------------------
          -- ML INFERENCE SERVICE DATABASE SCHEMA --
          ------------------------------------------

          -- Main requests table - Stores all inference requests and results
          CREATE TABLE IF NOT EXISTS requests (
            id SERIAL PRIMARY KEY,
            request_id VARCHAR(36) NOT NULL UNIQUE,     -- Client-facing UUID
            user_id VARCHAR(255) NOT NULL,              -- User identifier
            prompt TEXT NOT NULL,                       -- Input text/prompt
            completion TEXT,                            -- Generated output
            status VARCHAR(50) NOT NULL DEFAULT 'pending', -- Request status
            estimated_tokens INTEGER NOT NULL DEFAULT 0,   -- Estimated token count
            actual_tokens INTEGER,                         -- Actual used tokens
            prompt_tokens INTEGER,                         -- Tokens in prompt
            completion_tokens INTEGER,                     -- Tokens in output
            model VARCHAR(100) NOT NULL,                   -- ML model used
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            error TEXT                                     -- Error message if failed
          );

          -- Performance indexes for frequent query patterns
          CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id);
          CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
          CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at);
          
          -- Token usage tracking for billing and analytics
          CREATE TABLE IF NOT EXISTS token_logs (
            id SERIAL PRIMARY KEY,
            user_id VARCHAR(255) NOT NULL,                -- User identifier
            request_id VARCHAR(36) NOT NULL,              -- Reference to request
            model VARCHAR(100) NOT NULL,                  -- Model used
            prompt_tokens INTEGER NOT NULL,               -- Input tokens
            completion_tokens INTEGER NOT NULL,           -- Output tokens
            total_tokens INTEGER NOT NULL,                -- Total tokens used
            cost NUMERIC(10, 6) NOT NULL,                 -- Calculated cost
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (request_id) REFERENCES requests(request_id)
          );
          
          CREATE INDEX IF NOT EXISTS idx_token_logs_user_id ON token_logs(user_id);
          CREATE INDEX IF NOT EXISTS idx_token_logs_created_at ON token_logs(created_at);
          
          -- User quota management
          CREATE TABLE IF NOT EXISTS quota_usage (
            id SERIAL PRIMARY KEY,
            user_id VARCHAR(255) NOT NULL UNIQUE,         -- User identifier
            monthly_tokens INTEGER NOT NULL DEFAULT 0,     -- Monthly token quota
            reset_date DATE NOT NULL,                      -- When quota resets
            last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );
          
          CREATE INDEX IF NOT EXISTS idx_quota_usage_user_id ON quota_usage(user_id);
          EOF
          
          # Run the SQL script using environment variables for connection details
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f /tmp/init.sql
          echo "Database initialization completed successfully"
        # Get database connection details from ConfigMap and Secret
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_host
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
---
# Configuration for database connection details
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-db-config
data:
  # PostgreSQL host in the data-infra namespace
  postgres_host: "postgresql.data-infra.svc.cluster.local"
  # Database name for the ML service
  postgres_db: "mlservice" 