apiVersion: batch/v1
kind: Job
metadata:
  name: ml-db-init
  labels:
    app: ml-db-init
spec:
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-db
        image: postgres:14-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Create init SQL script
          cat > /tmp/init.sql << EOF
          -- Create requests table
          CREATE TABLE IF NOT EXISTS requests (
            id SERIAL PRIMARY KEY,
            request_id VARCHAR(36) NOT NULL UNIQUE,
            user_id VARCHAR(255) NOT NULL,
            prompt TEXT NOT NULL,
            completion TEXT,
            status VARCHAR(50) NOT NULL DEFAULT 'pending',
            estimated_tokens INTEGER NOT NULL DEFAULT 0,
            actual_tokens INTEGER,
            prompt_tokens INTEGER,
            completion_tokens INTEGER,
            model VARCHAR(100) NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            error TEXT
          );

          -- Create indexes for performance
          CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id);
          CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
          CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at);
          
          -- Create token logs table
          CREATE TABLE IF NOT EXISTS token_logs (
            id SERIAL PRIMARY KEY,
            user_id VARCHAR(255) NOT NULL,
            request_id VARCHAR(36) NOT NULL,
            model VARCHAR(100) NOT NULL,
            prompt_tokens INTEGER NOT NULL,
            completion_tokens INTEGER NOT NULL,
            total_tokens INTEGER NOT NULL,
            cost NUMERIC(10, 6) NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (request_id) REFERENCES requests(request_id)
          );
          
          CREATE INDEX IF NOT EXISTS idx_token_logs_user_id ON token_logs(user_id);
          CREATE INDEX IF NOT EXISTS idx_token_logs_created_at ON token_logs(created_at);
          
          -- Create quota usage table
          CREATE TABLE IF NOT EXISTS quota_usage (
            id SERIAL PRIMARY KEY,
            user_id VARCHAR(255) NOT NULL UNIQUE,
            monthly_tokens INTEGER NOT NULL DEFAULT 0,
            reset_date DATE NOT NULL,
            last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
          );
          
          CREATE INDEX IF NOT EXISTS idx_quota_usage_user_id ON quota_usage(user_id);
          EOF
          
          # Execute the SQL script
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f /tmp/init.sql
          echo "Database initialization completed successfully"
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_host
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-db-config
data:
  postgres_host: "postgresql.data-infra.svc.cluster.local"
  postgres_db: "mlservice" 