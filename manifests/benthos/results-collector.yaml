apiVersion: apps/v1
kind: Deployment
metadata:
  name: benthos-results-collector
  labels:
    app: benthos-results-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: benthos-results-collector
  template:
    metadata:
      labels:
        app: benthos-results-collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4197"
    spec:
      containers:
      - name: benthos
        image: jeffail/benthos:4.21
        ports:
        - containerPort: 4197
        volumeMounts:
        - name: config
          mountPath: /benthos.yaml
          subPath: benthos.yaml
        env:
        - name: REDIS_URL
          value: redis://redis:6379
        - name: RABBITMQ_URL
          value: amqp://user:password@rabbitmq:5672/
        - name: POSTGRES_DSN
          value: postgres://postgres:postgres@postgresql:5432/mlservice
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /ping
            port: 4197
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 4197
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: benthos-results-collector-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: benthos-results-collector-config
data:
  benthos.yaml: |
    http:
      address: 0.0.0.0:4197

    input:
      amqp_1:
        url: ${RABBITMQ_URL:amqp://guest:guest@localhost:5672/}
        queue: inference_results
        prefetch_count: 1
        consumer_tag: benthos-results-collector
        queue_declare:
          enabled: true
          durable: true
        bindings_declare:
          - exchange: ""
            key: inference_results

    pipeline:
      processors:
        # Log the received message
        - log:
            level: INFO
            message: "Collecting result for request ${!json(\"requestId\")} from user ${!json(\"userId\")}"
        
        # Update request in PostgreSQL
        - sql:
            driver: postgres
            data_source_name: ${POSTGRES_DSN:postgres://postgres:postgres@localhost:5432/mlservice}
            query: >
              UPDATE requests 
              SET result = $1, 
                  status = 'done', 
                  completed_at = NOW(), 
                  prompt_tokens = $2, 
                  completion_tokens = $3, 
                  total_tokens = $4,
                  model = $5
              WHERE request_id = $6
            args:
              - "${! json(\"result\") }"
              - "${! json(\"prompt_tokens\") }"
              - "${! json(\"completion_tokens\") }"
              - "${! json(\"total_tokens\") }"
              - "${! json(\"model\") }"
              - "${! json(\"requestId\") }"
        
        # Adjust token quota in Redis if needed
        - bloblang: |
            root = this
            root.token_adjustment_needed = this.token_adjustment != 0
        
        # Apply token adjustment if needed
        - switch:
            cases:
              - check: this.token_adjustment_needed
                processors:
                  # Adjust token quota in Redis
                  - redis:
                      url: ${REDIS_URL:redis://localhost:6379}
                      command: incrby
                      args:
                        - "user:${! json(\"userId\") }:quota:daily:tokens:used"
                        - "${! json(\"token_adjustment\") }"
                      retries: 3
                  # Log the adjustment
                  - log:
                      level: INFO
                      message: "Adjusted token quota for user ${!json(\"userId\")}: ${!json(\"token_adjustment\")} tokens (estimated: ${!json(\"estimatedTokens\")}, actual: ${!json(\"total_tokens\")})"
        
        # Store token usage in a separate table for analytics
        - sql:
            driver: postgres
            data_source_name: ${POSTGRES_DSN:postgres://postgres:postgres@localhost:5432/mlservice}
            query: >
              INSERT INTO token_usage 
              (request_id, user_id, prompt_tokens, completion_tokens, total_tokens, model, created_at) 
              VALUES ($1, $2, $3, $4, $5, $6, NOW())
            args:
              - "${! json(\"requestId\") }"
              - "${! json(\"userId\") }"
              - "${! json(\"prompt_tokens\") }"
              - "${! json(\"completion_tokens\") }"
              - "${! json(\"total_tokens\") }"
              - "${! json(\"model\") }"
        
        # Log completion
        - log:
            level: INFO
            message: "Request ${!json(\"requestId\")} completed and stored"

    output:
      drop: {}

    metrics:
      prometheus:
        use_histogram_timing: true
        add_process_metrics: true
        add_go_metrics: true

    logger:
      level: INFO
      format: json
      add_timestamp: true
---
apiVersion: v1
kind: Service
metadata:
  name: benthos-results-collector
  labels:
    app: benthos-results-collector
spec:
  ports:
  - port: 4197
    targetPort: 4197
    protocol: TCP
    name: http
  selector:
    app: benthos-results-collector 