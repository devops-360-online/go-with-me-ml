apiVersion: apps/v1
kind: Deployment
metadata:
  name: benthos-api-gateway
  namespace: default
  labels:
    app: benthos-api-gateway
    component: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: benthos-api-gateway
  template:
    metadata:
      labels:
        app: benthos-api-gateway
        component: api-gateway
    spec:
      automountServiceAccountToken: false
      containers:
      - name: benthos
        image: jeffail/benthos:4.21.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 4195
          name: http
        - containerPort: 9090
          name: metrics
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 500Mi
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /benthos.yaml
          subPath: benthos.yaml
        - name: data
          mountPath: /data
        env:
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: POSTGRES_DSN
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: dsn
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: LOG_LEVEL
          value: "INFO"
        livenessProbe:
          httpGet:
            path: /ping
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config-volume
        configMap:
          name: benthos-api-gateway-config
      - name: data
        persistentVolumeClaim:
          claimName: benthos-api-gateway-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: benthos-api-gateway-data
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: benthos-api-gateway-config
  namespace: default
data:
  benthos.yaml: |
    http:
      address: 0.0.0.0:4195
      enabled: true
      cors:
        enabled: true
        allowed_origins:
          - "*"
      
    input:
      label: http_requests
      http_server:
        path: /api/v1/inference
        methods:
          - POST
    
    pipeline:
      processors:
        - mapping: |
            root.request_id = uuid_v4()
            root.user_id = this.user_id
            root.status = "pending"
            root.created_at = now()
            root.prompt = this.prompt
            root.model = this.model
            root.estimated_tokens = length(this.prompt) / 4
            meta request_id = root.request_id
        
        - sql_raw:
            driver: postgres
            dsn: ${POSTGRES_DSN}
            query: >
              INSERT INTO requests (request_id, user_id, prompt, model, status, estimated_tokens, created_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7)
            args_mapping: |
              root = [
                this.request_id,
                this.user_id,
                this.prompt,
                this.model,
                this.status,
                this.estimated_tokens,
                this.created_at
              ]
    
    output:
      label: rabbitmq_outbound
      broker:
        outputs:
          - amqp_1:
              url: ${RABBITMQ_URL}
              exchange: ""
              key: ml_requests
              
          - sync_response:
              status: 202
              headers:
                content-type: application/json
              metadata:
                request_id: ${! meta("request_id") }
---
apiVersion: v1
kind: Service
metadata:
  name: benthos-api-gateway
  namespace: default
spec:
  selector:
    app: benthos-api-gateway
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: metrics
    port: 9090
    targetPort: metrics
  type: ClusterIP 