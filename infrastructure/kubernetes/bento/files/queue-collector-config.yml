input:
  amqp_1:
    url: ${RABBITMQ_URL}
    queue: ml_results
    consumer_tag: "bento_results_collector"
    prefetch_count: 1
    prefetch_size: 0
    bindings:
      - exchange: ml_results
        key: inference_result

pipeline:
  processors:
    # Processor to adjust token quotas in Redis based on actual token usage
    - try:
        - redis:
            url: ${REDIS_URL}
            command: HSET
            args_mapping: |
              root = [
                "user:" + this.user_id + ":tokens",
                "tokens_used",
                this.tokens_used
              ]
      catch:
        - log:
            level: ERROR
            message: "Failed to adjust token quota in Redis: ${! error() }"

    # Processor to store results in PostgreSQL
    - try:
        - sql_raw:
            driver: postgres
            dsn: ${POSTGRES_DSN}
            query: |
              INSERT INTO inference_results (
                request_id, user_id, model_id, input_text,
                output_text, tokens_used, created_at
              ) VALUES (
                $1, $2, $3, $4, $5, $6, $7
              )
            args_mapping: |
              root = [
                this.request_id,
                this.user_id,
                this.model_id,
                this.input_text,
                this.output_text,
                this.tokens_used,
                this.timestamp
              ]
      catch:
        - log:
            level: ERROR
            message: "Failed to store result in PostgreSQL: ${! error() }"

    # Processor to handle notifications (e.g., send a message to a notification service)
    - try:
        - http:
            url: ${NOTIFICATION_URL}
            verb: POST
            headers:
              Content-Type: application/json
            timeout: "5s"
      catch:
        - log:
            level: ERROR
            message: "Failed to send notification: ${! error() }"

output:
  drop: {} 