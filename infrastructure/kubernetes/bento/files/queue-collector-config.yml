input:
  amqp_1:
    urls:
      - "${RABBITMQ_URL}"
    source_address: "inference_results"
    credit: 64

pipeline:
  processors:
    - log:
        level: INFO
        message: "Received result message: ${! json() }"

    - try:
        - mapping: |
            # 1) Parse incoming message, fallback to {}
            let parsed = content().parse_json().catch({})

            # 2) Parse the nested "output" JSON, fallback to {}
            let data = $parsed.output.parse_json().catch({})

            # 3) Safe token_usage extraction
            let usage = $data.token_usage.or({})

            # 4) Compute counts with defaults
            let p = $usage.prompt_tokens.or(0).floor()
            let c = $usage.completion_tokens.or(0).floor()
            let t = $usage.total_tokens.or($p + $c).floor().or(1)

            # 5) Merge counters back into the original object
            root = $parsed.merge({
              "prompt_tokens":     $p,
              "completion_tokens": $c,
              "total_tokens":      $t,
              "output_text":      $data.output_text.or("")
            })

        - log:
            level: INFO
            add_timestamp: true
            message: "Token usage: total=${! this.total_tokens}, prompt=${! this.prompt_tokens}, completion=${! this.completion_tokens}"

        - branch:
            processors:
              - redis:
                  url: "${REDIS_URL}"
                  command: INCRBY
                  args_mapping: |
                    root = [
                      "user:" + this.user_id + ":quota:daily:tokens:used",
                      this.total_tokens
                    ]
              - log:
                  level: INFO
                  message: "Updated daily token quota for user ${! this.user_id } with ${! this.total_tokens } tokens"
            result_map: root = deleted()

        - log:
            level: WARN
            add_timestamp: true
            message: "Daily quota update: ${! error().or(\"Success\") }"

        - branch:
            processors:
              - redis:
                  url: "${REDIS_URL}"
                  command: INCRBY
                  args_mapping: |
                    root = [
                      "user:" + this.user_id + ":quota:monthly:tokens:used",
                      this.total_tokens
                    ]
              - log:
                  level: INFO
                  message: "Updated monthly token quota for user ${! this.user_id } with ${! this.total_tokens } tokens"
            result_map: root = deleted()

        - log:
            level: WARN
            add_timestamp: true
            message: "Monthly quota update: ${! error().or(\"Success\") }"

        - branch:
            processors:
              - sql_raw:
                  driver: postgres
                  dsn: "${POSTGRES_URL}"
                  query: |
                    UPDATE inference_requests
                    SET result = $1,
                        status = 'completed',
                        completed_at = NOW(),
                        prompt_tokens = $2,
                        completion_tokens = $3,
                        total_tokens = $4
                    WHERE request_id = $5;
                  args_mapping: |
                    root = [
                      this.output,
                      this.prompt_tokens,
                      this.completion_tokens,
                      this.total_tokens,
                      this.request_id
                    ]
              - log:
                  level: INFO
                  message: "Updated PostgreSQL with result for request ${! this.request_id }"
            result_map: root = deleted()

        - log:
            level: WARN
            add_timestamp: true
            message: "PostgreSQL update: ${! error().or(\"Success\") }"

        # NEW: Send HTTP notification to ML service for SSE clients
        - branch:
            processors:
              # Debug: log the exact JSON body that will be sent to /notify
              - mapping: |
                  root = {
                    "request_id": this.request_id,
                    "type": "completed",
                    "result": this.output_text,
                    "token_usage": {
                      "prompt_tokens": this.prompt_tokens,
                      "completion_tokens": this.completion_tokens,
                      "total_tokens": this.total_tokens
                    },
                    "timestamp": timestamp_unix()
                  }
              - log:
                  level: INFO
                  message: "HTTP notify body: ${! json() }"
              # Now actually send the HTTP request
              - http:
                  url: "${ML_SERVICE_URL}/notify"
                  verb: POST
                  headers:
                    Content-Type: application/json
                  timeout: "10s"
                  retries: 3
                  retry_period: "2s"
                  body: |
                    {
                      "request_id": "${! this.request_id }",
                      "type": "completed",
                      "result": ${! this.output_text },
                      "token_usage": {
                        "prompt_tokens": ${! this.prompt_tokens },
                        "completion_tokens": ${! this.completion_tokens },
                        "total_tokens": ${! this.total_tokens }
                      },
                      "timestamp": "${! timestamp_unix() }"
                    }
              - log:
                  level: INFO
                  message: "SSE notification sent for request ${! this.request_id }"
            result_map: root = deleted()

        - log:
            level: WARN
            add_timestamp: true
            message: "SSE notification: ${! error().or(\"Success\") }"

        - mapping: |
            # Final response payload
            root = {
              "request_id": this.request_id.string(),
              "user_id":    this.user_id.string(),
              "status":     "completed",
              "tokens_used": this.total_tokens.string(),
              "message":    "Result collected and processed successfully"
            }

        - log:
            level: INFO
            add_timestamp: true
            message: "Result processing completed: ${! json() }"

    - catch:
        - log:
            level: ERROR
            add_timestamp: true
            message: "Processing failed: ${!error()}"
        - mapping: |
            # Drop the bad message
            root = deleted()

output:
  drop: {}
