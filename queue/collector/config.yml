input:
  type: amqp
  amqp:
    url: "amqp://prod_user:StrongProdPassw0rd!@rabbitmq.queue.svc.cluster.local:5672/"
    queue: "inference_results"
    prefetch_count: 1
    consumer_tag: "benthos_results_collector"

pipeline:
  processors:
    # Processor to adjust token quotas in Redis based on actual token usage
    - try:
        - redis:
            url: "redis://redis.cache.svc.cluster.local:6379"
            command: "HINCRBY"
            args_mapping: |
              root = ["user:quota:${! json(\"user_id\") }", this.token_usage]
            result_map: "root.token_usage_adjusted = true"
      catch:
        - log:
            level: ERROR
            message: "Failed to adjust token quota in Redis: ${! error() }"

    # Processor to store results in PostgreSQL
    - try:
        - sql_insert:
            driver: "postgres"
            dsn: "postgres://user:password@postgres.db.svc.cluster.local:5432/results_db"
            table: "processed_results"
            columns:
              - name: "request_id"
                value: "${! json(\"request_id\") }"
              - name: "user_id"
                value: "${! json(\"user_id\") }"
              - name: "result"
                value: "${! json(\"result\") }"
              - name: "processed_at"
                value: "${! timestamp() }"
            result_map: "root.db_inserted = true"
      catch:
        - log:
            level: ERROR
            message: "Failed to store result in PostgreSQL: ${! error() }"

    # Processor to handle notifications (e.g., send a message to a notification service)
    - try:
        - http_client:
            url: "http://notification.service.svc.cluster.local:8080/notify"
            method: "POST"
            headers:
              Content-Type: application/json
            body: |
              {
                "user_id": "${! json(\"user_id\") }",
                "result": "${! json(\"result\") }",
                "processed_at": "${! timestamp() }"
              }
            response_map: "root.notification_sent = true"
            stream: false
      catch:
        - log:
            level: ERROR
            message: "Failed to send notification: ${! error() }"

output:
  type: drop
