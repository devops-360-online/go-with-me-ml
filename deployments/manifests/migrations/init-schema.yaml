# Database Schema Initialization Job
# 
# This job creates the necessary database tables for the ML Inference service:
# - users: Stores user information and authentication details
# - quotas: Defines usage limits for each user
# - requests: Stores all ML requests and their status
# - token_usage: Tracks token usage for billing and quotas
apiVersion: batch/v1
kind: Job
metadata:
  name: ml-db-init
  labels:
    app: ml-db-init
spec:
  # Automatically delete this job after 24 hours (86400 seconds)
  ttlSecondsAfterFinished: 86400
  template:
    spec:
      # Don't restart if successful; retry only on failure
      restartPolicy: OnFailure
      containers:
      - name: init-db
        # Using PostgreSQL Alpine image for a lightweight container
        image: postgres:14-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Create SQL script with all database schema definitions
          cat > /tmp/init.sql << EOF
          ------------------------------------------
          -- ML INFERENCE SERVICE DATABASE SCHEMA --
          ------------------------------------------

          -- Users table - Stores user information
          CREATE TABLE IF NOT EXISTS users (
            user_id VARCHAR(50) PRIMARY KEY,
            name VARCHAR(100),
            email VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            active BOOLEAN DEFAULT TRUE
          );

          -- Quotas table - Defines usage limits for each user
          CREATE TABLE IF NOT EXISTS quotas (
            quota_id SERIAL PRIMARY KEY,
            user_id VARCHAR(50) REFERENCES users(user_id),
            request_limit INTEGER NOT NULL,
            token_limit INTEGER NOT NULL,
            tier VARCHAR(20) NOT NULL,
            reset_frequency VARCHAR(20) DEFAULT 'monthly',
            UNIQUE(user_id)
          );

          -- Requests table - Stores all inference requests and results
          CREATE TABLE IF NOT EXISTS requests (
            request_id UUID PRIMARY KEY,
            user_id VARCHAR(50) REFERENCES users(user_id),
            prompt TEXT NOT NULL,
            result TEXT,
            status VARCHAR(20) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP,
            estimated_tokens INTEGER,
            prompt_tokens INTEGER,
            completion_tokens INTEGER,
            total_tokens INTEGER,
            model VARCHAR(50),
            error TEXT
          );

          -- Token usage table - Tracks detailed token consumption for analytics
          CREATE TABLE IF NOT EXISTS token_usage (
            usage_id SERIAL PRIMARY KEY,
            request_id UUID REFERENCES requests(request_id),
            user_id VARCHAR(50) REFERENCES users(user_id),
            prompt_tokens INTEGER NOT NULL,
            completion_tokens INTEGER NOT NULL,
            total_tokens INTEGER NOT NULL,
            model VARCHAR(50) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create indexes for performance
          CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id);
          CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
          CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at);
          CREATE INDEX IF NOT EXISTS idx_token_usage_user_id ON token_usage(user_id);
          CREATE INDEX IF NOT EXISTS idx_token_usage_created_at ON token_usage(created_at);

          -- Insert sample user
          INSERT INTO users (user_id, name, email, active)
          VALUES ('test-user', 'Test User', 'test@example.com', TRUE)
          ON CONFLICT (user_id) DO NOTHING;

          -- Insert sample quota
          INSERT INTO quotas (user_id, request_limit, token_limit, tier)
          VALUES ('test-user', 100, 10000, 'free')
          ON CONFLICT (user_id) DO NOTHING;
          EOF
          
          # Run the SQL script using environment variables for connection details
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f /tmp/init.sql
          echo "Database initialization completed successfully"
        # Get database connection details from ConfigMap and Secret
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_host
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: external-db-config
              key: postgres_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
---
# Configuration for database connection details
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-db-config
data:
  # PostgreSQL host in the data-infra namespace
  postgres_host: "postgresql.data-infra.svc.cluster.local"
  # Database name for the ML service
  postgres_db: "mlservice" 