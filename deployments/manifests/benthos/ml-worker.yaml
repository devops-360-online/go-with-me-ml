apiVersion: v1
kind: ServiceAccount
metadata:
  name: benthos-ml-worker
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: benthos-ml-worker
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: benthos-ml-worker
  namespace: default
subjects:
- kind: ServiceAccount
  name: benthos-ml-worker
  namespace: default
roleRef:
  kind: Role
  name: benthos-ml-worker
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: benthos-ml-worker
  labels:
    app: benthos-ml-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: benthos-ml-worker
  template:
    metadata:
      labels:
        app: benthos-ml-worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4196"
    spec:
      serviceAccountName: benthos-ml-worker
      containers:
      - name: benthos
        image: jeffail/benthos:4.21.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 4196
        volumeMounts:
        - name: config
          mountPath: /benthos.yaml
          subPath: benthos.yaml
        - name: worker-data
          mountPath: /data
        env:
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: url
        - name: POSTGRES_DSN
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: dsn
        - name: ML_SERVICE_URL
          value: "http://ml-inference:8080"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
            ephemeral-storage: 2Gi
        livenessProbe:
          httpGet:
            path: /ping
            port: 4196
          initialDelaySeconds: 10
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /ready
            port: 4196
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: benthos-ml-worker-config
      - name: worker-data
        persistentVolumeClaim:
          claimName: benthos-ml-worker-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: benthos-ml-worker-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: benthos-ml-worker
  labels:
    app: benthos-ml-worker
spec:
  ports:
  - port: 4196
    targetPort: 4196
    protocol: TCP
    name: http
  selector:
    app: benthos-ml-worker
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: benthos-ml-worker-config
# The actual config data will be generated by kustomize
# from the files in config/benthos/
---
apiVersion: v1
kind: Service
metadata:
  name: benthos-ml-worker
  labels:
    app: benthos-ml-worker
spec:
  ports:
  - port: 4196
    targetPort: 4196
    protocol: TCP
    name: http
  selector:
    app: benthos-ml-worker

# Input configuration - consume from RabbitMQ
input:
  label: rabbitmq_inbound
  amqp_0_9:
    url: ${RABBITMQ_URL:amqp://user:password@rabbitmq:5672/}
    queue: ml-requests
    consumer_tag: benthos-ml-worker 