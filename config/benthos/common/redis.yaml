# Redis operations for quota management

# Get request quota for a user
redis_get_request_quota:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: GET
    args_mapping: 'root = ["user:" + this.userId + ":request_count"]'
    result_codec: json
    fallback: "0"
  bloblang: |
    root = this
    root.requestCount = this.redis_result.number() or 0

# Get request quota limit for a user
redis_get_request_limit:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: GET
    args_mapping: 'root = ["user:" + this.userId + ":request_limit"]'
    result_codec: json
    fallback: "1000"  # Default limit if not set
  bloblang: |
    root = this
    root.requestLimit = this.redis_result.number() or 1000

# Get token quota for a user
redis_get_token_quota:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: GET
    args_mapping: 'root = ["user:" + this.userId + ":token_count"]'
    result_codec: json
    fallback: "0"
  bloblang: |
    root = this
    root.tokenCount = this.redis_result.number() or 0

# Get token quota limit for a user
redis_get_token_limit:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: GET
    args_mapping: 'root = ["user:" + this.userId + ":token_limit"]'
    result_codec: json
    fallback: "100000"  # Default limit if not set
  bloblang: |
    root = this
    root.tokenLimit = this.redis_result.number() or 100000

# Increment request count for a user
redis_incr_request_count:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: INCR
    args_mapping: 'root = ["user:" + this.userId + ":request_count"]'
  bloblang: |
    root = this
    root.newRequestCount = this.redis_result.number() or 0

# Reserve estimated tokens for a user
redis_reserve_tokens:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: INCRBY
    args_mapping: 'root = ["user:" + this.userId + ":token_count", this.estimatedTokens]'
  bloblang: |
    root = this
    root.newTokenCount = this.redis_result.number() or 0

# Adjust token count after processing
redis_adjust_tokens:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: INCRBY
    args_mapping: 'root = ["user:" + this.userId + ":token_count", this.tokenAdjustment]'
  bloblang: |
    root = this
    root.adjustedTokenCount = this.redis_result.number() or 0

# Store request-token mapping for later adjustment
redis_store_request_tokens:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: SET
    args_mapping: 'root = ["request:" + this.requestId + ":estimated_tokens", this.estimatedTokens]'
  bloblang: |
    root = this

# Get estimated tokens for a request
redis_get_request_tokens:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: GET
    args_mapping: 'root = ["request:" + this.requestId + ":estimated_tokens"]'
    result_codec: json
    fallback: "0"
  bloblang: |
    root = this
    root.estimatedTokens = this.redis_result.number() or 0

# Delete request-token mapping after adjustment
redis_delete_request_tokens:
  redis:
    url: ${REDIS_URL:redis://localhost:6379}
    command: DEL
    args_mapping: 'root = ["request:" + this.requestId + ":estimated_tokens"]'
  bloblang: |
    root = this 